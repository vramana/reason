# Portions Copyright (c) 2015-present, Facebook, Inc. All rights reserved.
'name': 'Reason'
'scopeName': 'source.reason'
'fileTypes': [
  're',
  'rei'
]

'repository': {
  'block_doc_comment': {
    'comment': 'Block documentation comment'
    'name': 'comment.block.documentation.reason'
    'begin': '/\\*[\\*!](?![\\*/])'
    'end': '\\*/'
    'patterns': [
      { 'include': '#block_doc_comment' }
      { 'include': '#block_comment' }
    ]
  }
  'block_comment': {
    'comment': 'Block comment'
    'name': 'comment.block.reason'
    'begin': '/\\*'
    'end': '\\*/'
    'patterns': [
      { 'include': '#block_doc_comment' }
      { 'include': '#block_comment' }
    ]
  }
  'line_doc_comment': {
    'comment': 'Single-line documentation comment'
    'name': 'comment.line.documentation.reason'
    'begin': '//[!/](?=[^/])'
    'end': '$'
  }
  'line_comment': {
    'comment': 'Single-line comment'
    'name': 'comment.line.double-slash.reason'
    'begin': '//'
    'end': '$'
  }
  'escaped_character': {
    'name': 'constant.character.escape.reason'
    'match': '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
  }
  'string_literal': {
    'comment': 'Double-quote string literal'
    'name': 'string.quoted.double.reason'
    'begin': 'b?"'
    'end': '"'
    'patterns': [
      { 'include': '#escaped_character' }
    ]
  }
  'raw_string_literal': {
    'comment': 'Raw double-quote string literal'
    'name': 'string.quoted.double.raw.reason'
    'begin': 'b?r(#*)"'
    'end': '"\\1'
  }
  'sigils': {
    'comment': 'Sigil'
    'name': 'keyword.operator.sigil.reason'
    'match': '[&*](?=[a-zA-Z0-9_\\(\\[\\|\\"]+)'
  }
  'variant': {
    'comment': 'variant value/type or module'
    'name': 'variable.language.reason'
    'match': '\\b[A-Z][a-zA-Z0-9\'_]*\\b'
  }
  'mutable': {
    'comment': 'Mutable storage modifier'
    'name': 'storage.modifier.mut.reason'
    'match': '\\bmutable\\b'
  }
  'box': {
    'comment': 'Box storage modifier'
    'name': 'storage.modifier.box.reason'
    'match': '\\bbox\\b'
  }
  'lifetime': {
    'comment': 'Named lifetime'
    'name': 'storage.modifier.lifetime.reason'
    'match': '\'([a-zA-Z_][a-zA-Z0-9_]*)\\b'
    'captures': {
      '1': { 'name': 'entity.name.lifetime.reason' }
    }
  }
  'ref_lifetime': {
    'comment': 'Reference with named lifetime'
    'match': '&(\'([a-zA-Z_][a-zA-Z0-9_]*))\\b'
    'captures': {
      '1': { 'name': 'storage.modifier.lifetime.reason' }
      '2': { 'name': 'entity.name.lifetime.reason' }
    }
  }
  'core_types': {
    'comment': 'Built-in/core type'
    'name': 'storage.type.core.reason'
    'match': '\\b(bool|option|string|float|int|list|array|char|usize|isize|u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|str|self)\\b'
  }
  'core_marker': {
    'comment': 'Core trait (marker)'
    'name': 'support.type.marker.reason'
    'match': '\\b(Copy|Send|Sized|Sync)\\b'
  }
  'traits': {
    'comment': 'Core trait'
    'name': 'support.type.core.reason'
    'match': '\\b(Drop|Fn|FnMut|FnOnce|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|IntoIterator|Iterator|DoubleEndedIterator|Extend|ExactSizeIterator)\\b'
  }
  'std_types': {
    'comment': 'Standard library type'
    'name': 'storage.class.std.reason'
    'match': '\\b(Box|String|Vec|Path|PathBuf)\\b'
  }
  'std_traits': {
    'comment': 'Standard library trait'
    'name': 'support.type.std.reason'
    'match': '\\b(ToOwned|ToString)\\b'
  }
  'type_params': {
    'comment': 'Type parameters'
    'name': 'meta.type_params.reason'
    'begin': '<(?![=<])'
    'end': '>'
    'patterns': [
      { 'include': '#block_comment' }
      { 'include': '#line_comment' }
      { 'include': '#sigils' }
      { 'include': '#mutable' }
      { 'include': '#lifetime' }
      { 'include': '#core_types' }
      { 'include': '#core_marker' }
      { 'include': '#traits' }
      { 'include': '#std_types' }
      { 'include': '#std_traits' }
      { 'include': '#type_params' }
    ]
  }
}

'patterns': [
  # Comments
  { 'include': '#block_doc_comment' }
  { 'include': '#block_comment' }
  { 'include': '#line_doc_comment' }
  { 'include': '#line_comment' }
  # Attributes
  {
    'comment': 'Attribute'
    'name': 'meta.attribute.reason'
    'begin': '#\\!?\\['
    'end': '\\]'
    'patterns': [
      { 'include': '#string_literal' }
    ]
  }
  # Strings
  {
    'comment': 'Single-quote string literal (character)'
    'name': 'string.quoted.single.reason'
    'match': 'b?\'([^\'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))\''
  }
  { 'include': '#string_literal' }
  { 'include': '#raw_string_literal' }

  # Arrows
  {
    'comment': 'Arrows'
    'name': 'keyword.operator.reason'
    'match': '=>|<-'
  }
  # Numbers
  {
    'comment': 'Floating point literal (fraction)'
    'name': 'constant.numeric.float.reason'
    'match': '\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b'
  }
  {
    'comment': 'Floating point literal (exponent)'
    'name': 'constant.numeric.float.reason'
    'match': '\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\b'
  }
  {
    'comment': 'Floating point literal (typed)'
    'name': 'constant.numeric.float.reason'
    'match': '\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\b'
  }
  {
    'comment': 'Integer literal (decimal)'
    'name': 'constant.numeric.integer.decimal.reason'
    'match': '\\b[0-9][0-9_]*([ui](8|16|32|64|s|size))?\\b'
  }
  {
    'comment': 'Integer literal (hexadecimal)'
    'name': 'constant.numeric.integer.hexadecimal.reason'
    'match': '\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|s|size))?\\b'
  }
  {
    'comment': 'Integer literal (octal)'
    'name': 'constant.numeric.integer.octal.reason'
    'match': '\\b0o[0-7_]+([ui](8|16|32|64|s|size))?\\b'
  }
  {
    'comment': 'Integer literal (binary)'
    'name': 'constant.numeric.integer.binary.reason'
    'match': '\\b0b[01_]+([ui](8|16|32|64|s|size))?\\b'
  }
  # Language
  {
    'comment': 'Static storage modifier'
    'name': 'storage.modifier.static.reason'
    'match': '\\bstatic\\b'
  }
  {
    'comment': 'Const storage modifier'
    'name': 'storage.modifier.const.reason'
    'match': '\\bconst\\b'
  }
  {
    'comment': 'Visibility modifier'
    'name': 'storage.modifier.visibility.reason'
    'match': '\\bpub\\b'
  }
  {
    'comment': 'Boolean constant'
    'name': 'constant.language.boolean.reason'
    'match': '\\b(true|false)\\b'
  }
  {
    'comment': 'Control keyword'
    'name': 'keyword.control.reason'
    'match': '\\b(break|continue|else|if|in|for|loop|switch|try|raise|while)\\b'
  }
  {
    'comment': 'Keyword'
    'name': 'keyword.other.reason'
    'match': '\\b(extern|module|include|open|of|ref|as|when|move)\\b'
  }
  {
    'comment': 'Unsafe code keyword'
    'name': 'keyword.other.unsafe.reason'
    'match': '\\bunsafe\\b'
  }
  { 'include': '#sigils' }
  { 'include': '#variant' }
  { 'include': '#mutable' }
  { 'include': '#box' }
  { 'include': '#lifetime' }
  { 'include': '#ref_lifetime' }
  # Operators
  {
    'comment': 'Operator'
    'name': 'keyword.operator.reason'
    'match': '(\\+|-|\\|>|>>=|!==|===|!=|:=|==|/|\\*|=|<=|>=|\\^|&|\\||!|%|<<|>>|>|<)'
  }
  # Standard types and traits
  { 'include': '#core_types' }
  { 'include': '#core_marker' }
  { 'include': '#traits' }
  { 'include': '#std_types' }
  { 'include': '#std_vars' }
  { 'include': '#std_traits' }
  # TODO: procs and closures
  # Function and macro calls
  {
    'comment': 'Named argument'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*::\\s*)'
    'captures': {
      '1': { 'name': 'entity.name.function.macro.reason' }
    }
  }
  # let binding.
  {
    'comment': 'binding'
    'match': '\\b(val(\\s+virtual)?|class(\\s+virtual)?|and|method|(let(\\s+module)?(\\s+rec)?))(\\s+mutable)?\\s+([a-zA-Z_][a-zA-Z0-9_]*)?'
    'captures': {
      '1': { 'name': 'keyword.other.fun.reason' }
      '2': { 'name': 'keyword.other.fun.reason' }
      '3': { 'name': 'keyword.other.fun.reason' }
      '4': { 'name': 'keyword.other.fun.reason' }
      '4': { 'name': 'keyword.other.fun.reason' }
      '5': { 'name': 'entity.name.reason' }
    }
  }
  # Function/let binding. Not trying to parse arguments because they
  # can be annotated and that requires something much more elaborate.
  {
    'comment': 'Function definition'
    'match': '\\b(fun)\\b'
    'captures': {
      '1': { 'name': 'keyword.other.fun.reason' }
    }
  }
  # Type declaration
  {
    'comment': 'Type declaration'
    'begin': '\\b(enum|struct|trait)\\s+([a-zA-Z_][a-zA-Z0-9_]*)'
    'end': '[\\{;]|(and)'
    'beginCaptures': {
      '1': { 'name': 'storage.type.reason' }
      '2': { 'name': 'entity.name.type.reason' }
    }
    'patterns': [
      { 'include': '#block_comment' }
      { 'include': '#line_comment' }
      { 'include': '#traits' }
      { 'include': '#std_traits' }
      { 'include': '#type_params' }
    ]
  }
  # Type alias
  {
    'comment': 'Type alias'
    'begin': '\\b(type|exception|effect)\\s+([a-zA-Z_][a-zA-Z0-9_]*)'
    'end': ';|(and)'
    'beginCaptures': {
      '1': { 'name': 'storage.type.reason' }
      '2': { 'name': 'entity.name.type.reason' }
    }
    'patterns': [
      { 'include': '#block_comment' }
      { 'include': '#line_comment' }
      { 'include': '#sigils' }
      { 'include': '#variant' }
      { 'include': '#mutable' }
      { 'include': '#ref_lifetime' }
      { 'include': '#core_types' }
      { 'include': '#core_marker' }
      { 'include': '#traits' }
      { 'include': '#std_types' }
      { 'include': '#std_traits' }
      { 'include': '#type_params' }
    ]
  }
  # Implementation
  {
    'comment': 'Implementation'
    'begin': '\\b(impl)\\b'
    'end': '\\{'
    'beginCaptures': {
      '1': { 'name': 'storage.type.reason' }
    }
    'patterns': [
      { 'include': '#block_comment' }
      { 'include': '#line_comment' }
      { 'include': '#sigils' }
      { 'include': '#mutable' }
      { 'include': '#ref_lifetime' }
      { 'include': '#core_types' }
      { 'include': '#core_marker' }
      { 'include': '#traits' }
      { 'include': '#std_types' }
      { 'include': '#std_traits' }
      { 'include': '#type_params' }
      {
        'name': 'storage.type.reason'
        'match': '\\bfor\\b'
      }
    ]
  }
]
